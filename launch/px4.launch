<launch>
  <!-- ================================
       1. Gazebo World
  ================================== -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find cart_teb_test)/worlds/empty_world.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
    <arg name="verbose" value="false"/>
    <!-- Remove tf remap for proper TF handling -->
  </include>

  <!-- ================================
       2. Robot Model & State Publisher
  ================================== -->
  <!-- Load URDF -->
  <param name="robot_description" command="$(find xacro)/xacro $(find cart_teb_test)/urdf/drone.urdf.xacro" />
  
  <!-- Spawn Robot in Gazebo -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" 
        args="-param robot_description -urdf -model px4_drone -x 0 -y 0 -z 0.1" 
        respawn="false" output="screen" />
  
  <!-- Robot State Publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
    <param name="publish_frequency" value="50.0"/>
    <param name="use_tf_static" value="true"/>
  </node>

  <!-- Joint State Publisher (if needed) -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="false"/>
    <param name="rate" value="50"/>
  </node>

  <!-- ================================
       3. Static Transforms
  ================================== -->
  <!-- World to Map transform -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="world_to_map" 
        args="0 0 0 0 0 0 world map" />
  
  <!-- Map to Odom initial transform (will be overridden by Cartographer) -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_odom_init" 
        args="0 0 0 0 0 0 map odom" />

  <!-- ================================
       4. PX4 SITL & MAVROS
  ================================== -->
  <!-- Start PX4 SITL -->
  <node name="sitl" pkg="px4" type="px4" output="screen"
        args="$(find px4)/build/px4_sitl_default/etc -s etc/init.d-posix/rcS">
    <env name="PX4_SIM_MODEL" value="iris" />
    <env name="PX4_ESTIMATOR" value="ekf2" />
  </node>

  <!-- MAVROS Connection -->
  <include file="$(find mavros)/launch/px4.launch">
    <arg name="fcu_url" value="udp://:14540@127.0.0.1:14557"/>
    <arg name="gcs_url" value=""/>
    <arg name="tgt_system" value="1"/>
    <arg name="tgt_component" value="1"/>
    <arg name="log_output" value="screen"/>
    <arg name="fcu_protocol" value="v2.0"/>
    <arg name="respawn_mavros" value="true"/>
  </include>

  <!-- ================================
       5. AUTO TAKEOFF SEQUENCE
  ================================== -->
  <!-- Auto Takeoff Node -->
  <node pkg="cart_teb_test" type="auto_takeoff.py" name="auto_takeoff_node" 
        output="screen" required="true" launch-prefix="bash -c 'sleep 5; $0 $@'"/>

  <!-- ================================
       6. Sensor Data Processing (Start after takeoff)
  ================================== -->
  <!-- IMU Data Filter (optional - remove noise) -->
  <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_madgwick" output="screen"
        launch-prefix="$(find cart_teb_test)/scripts/wait_for_takeoff.sh 120; sleep 2; exec">
    <param name="fixed_frame" value="base_link"/>
    <param name="use_mag" value="false"/>
    <param name="publish_tf" value="false"/>
    <param name="use_magnetic_field_msg" value="false"/>
    <remap from="/imu/data_raw" to="/imu"/>
    <remap from="/imu/data" to="/imu/filtered"/>
  </node>

  <!-- ================================
       7. Cartographer SLAM (Start after takeoff)
  ================================== -->
  <node name="cartographer_node" pkg="cartographer_ros"
        type="cartographer_node" args="
          -configuration_directory $(find cart_teb_test)/config
          -configuration_basename drone_2d.lua" output="screen"
        launch-prefix="$(find cart_teb_test)/scripts/wait_for_takeoff.sh 120; sleep 3; exec">
    <param name="use_sim_time" value="true"/>
    <remap from="scan" to="/scan"/>
    <remap from="imu" to="/imu/filtered"/>
    <remap from="odom" to="/mavros/local_position/odom"/>
    <param name="use_odometry" value="true"/>
  </node>

  <!-- Cartographer Occupancy Grid -->
  <node name="cartographer_occupancy_grid_node"
        pkg="cartographer_ros"
        type="cartographer_occupancy_grid_node"
        args="-resolution 0.05" output="screen"
        launch-prefix="$(find cart_teb_test)/scripts/wait_for_takeoff.sh 120; sleep 5; exec">
    <param name="use_sim_time" value="true"/>
  </node>

  <!-- ================================
       8. Navigation Stack (Start after takeoff + map ready)
  ================================== -->
  <!-- Move Base with delay to wait for takeoff and map -->
  <node pkg="move_base" type="move_base" name="move_base" respawn="false" 
        clear_params="true" output="screen"
        launch-prefix="$(find cart_teb_test)/scripts/wait_for_takeoff.sh 120; sleep 10; exec">
    
    <!-- Base planners -->
    <param name="base_global_planner" value="global_planner/GlobalPlanner"/>
    <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS"/>
    
    <!-- Move base parameters -->
    <param name="controller_frequency" value="10.0"/>
    <param name="controller_patience" value="15.0"/>
    <param name="planner_frequency" value="2.0"/>
    <param name="planner_patience" value="10.0"/>
    <param name="oscillation_timeout" value="10.0"/>
    <param name="oscillation_distance" value="0.2"/>
    <param name="recovery_behavior_enabled" value="true"/>
    <param name="clearing_rotation_allowed" value="false"/>
    <param name="shutdown_costmaps" value="false"/>
    <param name="use_sim_time" value="true"/>
    <param name="transform_timeout" value="2.0"/>

    <rosparam file="$(find cart_teb_test)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find cart_teb_test)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find cart_teb_test)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find cart_teb_test)/config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find cart_teb_test)/config/teb_local_planner_params.yaml" command="load" />
    <rosparam file="$(find cart_teb_test)/config/global_planner_params.yaml" command="load" />

    <!-- Inline basic config if files don't exist -->
    <rosparam>
      # Global Costmap
      global_costmap:
        global_frame: map
        robot_base_frame: base_link
        update_frequency: 2.0
        publish_frequency: 1.0
        rolling_window: false
        width: 100.0
        height: 100.0
        resolution: 0.1
        transform_tolerance: 2.0
        plugins:
          - {name: static_layer, type: "costmap_2d::StaticLayer"}
          - {name: inflation_layer, type: "costmap_2d::InflationLayer"}
        static_layer:
          enabled: true
          map_topic: /map
          subscribe_to_updates: true
        inflation_layer:
          enabled: true
          inflation_radius: 0.8
          cost_scaling_factor: 5.0

      # Local Costmap  
      local_costmap:
        global_frame: odom
        robot_base_frame: base_link
        update_frequency: 10.0
        publish_frequency: 5.0
        rolling_window: true
        width: 8.0
        height: 8.0
        resolution: 0.05
        transform_tolerance: 1.0
        plugins:
          - {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}
          - {name: inflation_layer, type: "costmap_2d::InflationLayer"}
        obstacle_layer:
          enabled: true
          observation_sources: scan
          track_unknown_space: true
          scan:
            sensor_frame: lidar_link
            data_type: LaserScan
            topic: /scan
            marking: true
            clearing: true
            max_obstacle_height: 3.0
            min_obstacle_height: 0.0
            obstacle_range: 6.0
            raytrace_range: 8.0
            inf_is_valid: true
            expected_update_rate: 20.0
        inflation_layer:
          enabled: true
          inflation_radius: 0.8
          cost_scaling_factor: 5.0

      # TEB Local Planner
      TebLocalPlannerROS:
        # Robot configuration
        max_vel_x: 1.0
        max_vel_x_backwards: 0.3
        max_vel_y: 1.0
        max_vel_theta: 0.8
        acc_lim_x: 0.5
        acc_lim_y: 0.5
        acc_lim_theta: 0.5
        min_turning_radius: 0.0
        wheelbase: 0.0
        cmd_angle_instead_rotvel: false
        
        # Footprint model (drone)
        footprint_model:
          type: "polygon"
          vertices: [[-0.25, -0.25], [0.25, -0.25], [0.25, 0.25], [-0.25, 0.25]]
        
        # Goal tolerance
        xy_goal_tolerance: 0.3
        yaw_goal_tolerance: 0.3
        free_goal_vel: false
        complete_global_plan: true
        
        # Trajectory configuration
        teb_autosize: true
        dt_ref: 0.3
        dt_hysteresis: 0.1
        max_samples: 500
        global_plan_overwrite_orientation: true
        allow_init_with_backwards_motion: false
        max_global_plan_lookahead_dist: 5.0
        global_plan_viapoint_sep: -1
        global_plan_prune_distance: 1.5
        exact_arc_length: false
        feasibility_check_no_poses: 5
        publish_feedback: false
        
        # Obstacles
        min_obstacle_dist: 0.6
        inflation_dist: 1.0
        dynamic_obstacle_inflation_dist: 1.0
        include_dynamic_obstacles: true
        include_costmap_obstacles: true
        costmap_obstacles_behind_robot_dist: 2.0
        obstacle_poses_affected: 15
        
        # Optimization weights
        weight_max_vel_x: 2
        weight_max_vel_y: 2
        weight_max_vel_theta: 1
        weight_acc_lim_x: 1
        weight_acc_lim_y: 1
        weight_acc_lim_theta: 1
        weight_kinematics_nh: 1000
        weight_kinematics_forward_drive: 1
        weight_kinematics_turning_radius: 1
        weight_optimaltime: 1
        weight_shortest_path: 0
        weight_obstacle: 100
        weight_inflation: 0.2
        weight_dynamic_obstacle: 10
        weight_dynamic_obstacle_inflation: 0.2
        weight_viapoint: 1
        weight_adapt_factor: 2
        
        # Homotopy Class Planner
        enable_homotopy_class_planning: true
        enable_multithreading: true
        max_number_classes: 4
        selection_cost_hysteresis: 1.0
        selection_prefer_initial_plan: 0.95
        selection_obst_cost_scale: 100.0
        roadmap_graph_no_samples: 15
        roadmap_graph_area_width: 5
        h_signature_prescaler: 0.5
        h_signature_threshold: 0.1
        obstacle_heading_threshold: 0.45
        viapoints_all_candidates: true
        visualize_hc_graph: false
        
        # Recovery
        shrink_horizon_backup: true
        shrink_horizon_min_duration: 10
        oscillation_recovery: true
        oscillation_v_eps: 0.1
        oscillation_omega_eps: 0.1
        oscillation_recovery_min_duration: 10
        oscillation_filter_duration: 10

      # Global Planner
      GlobalPlanner:
        allow_unknown: true
        use_dijkstra: true
        use_quadratic: true
        use_grid_path: false
        old_navfn_behavior: false
        cost_factor: 3.0
        neutral_cost: 50
        lethal_cost: 253
        publish_potential: false
        default_tolerance: 0.5
    </rosparam>
  </node>

  <!-- ================================
       9. Visualization & Tools (Start after takeoff)
  ================================== -->
  <!-- RViz -->
  <node name="rviz" pkg="rviz" type="rviz" 
        args="-d $(find cart_teb_test)/config/drone_navigation.rviz" 
        output="screen" required="false"
        launch-prefix="$(find cart_teb_test)/scripts/wait_for_takeoff.sh 120; sleep 8; exec"/>

  <!-- Initial Pose Publisher (Start after takeoff) -->
  <node pkg="cart_teb_test" type="publish_init_pose.py" name="init_pose_pub" output="screen"
        launch-prefix="$(find cart_teb_test)/scripts/wait_for_takeoff.sh 120; sleep 12; exec"/>

  <!-- ================================
       10. Optional: Teleop for testing (Start after takeoff)
  ================================== -->
  <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop" output="screen"
        launch-prefix="$(find cart_teb_test)/scripts/wait_for_takeoff.sh 120; sleep 15; exec">
    <remap from="cmd_vel" to="cmd_vel_teleop"/>
  </node>

  <!-- Command velocity multiplexer (choose between navigation and teleop) -->
  <node pkg="topic_tools" type="mux" name="cmd_vel_mux" 
        args="/cmd_vel /move_base/cmd_vel /cmd_vel_teleop"
        launch-prefix="$(find cart_teb_test)/scripts/wait_for_takeoff.sh 120; sleep 16; exec">
    <remap from="mux" to="cmd_vel_select"/>
  </node>

</launch>
