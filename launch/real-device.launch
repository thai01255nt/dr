<launch>
<!-- base_link -> imu_link -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_imu"
        args="0 0 0 0 0 0 base_link imu_link" />
  
  <!-- base_link -> lidar_link -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_lidar"
        args="0 0 0.15 0 0 0 base_link lidar_link" />

  <!-- base_link -> lidar_link -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_base_laser"
        args="0 0 0 0 0 0 base_link base_laser" />
  
  <!-- base_link -> gps_link -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_gps"
        args="-0.05 0 0.03 0 0 0 base_link gps_link" />
  
  <!-- base_link -> camera_link (quay xuống) -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_camera"
        args="0 0 -0.1 -1.5708 0 0 base_link camera_link" />aunch>
    <node pkg="tf2_ros" type="static_transform_publisher" name="world_to_map" args="0 0 0 0 0 0 world map" />

  <!-- Cartographer Node -->
  <node name="cartographer_node" pkg="cartographer_ros"
        type="cartographer_node" args="
          -configuration_directory $(find cart_teb_test)/config
          -configuration_basename drone_2d.lua">
    <remap from="scan" to="/scan"/>
    <remap from="imu" to="/mavros/imu/data"/>
    <remap from="fix" to="/mavros/global_position/global"/>
  </node>
  <!-- Occupancy Grid (map_server) -->
  <node name="cartographer_occupancy_grid_node"
        pkg="cartographer_ros"
        type="cartographer_occupancy_grid_node"
        args="-resolution 0.05" output="screen"/>
  <!-- Delay start move_base để đợi Cartographer tạo map và transforms -->
  <node pkg="move_base" type="move_base" name="move_base" respawn="false" clear_params="true" launch-prefix="bash -c 'sleep 30; $0 $@' ">
    <remap from="scan" to="/scan"/>
    <remap from="imu" to="/mavros/imu/data"/>
    <remap from="fix" to="/mavros/global_position/global"/>
    <remap from="cmd_vel" to="/mavros/setpoint_velocity/cmd_vel_unstamped"/>
    <param name="base_global_planner" value="global_planner/GlobalPlanner"/>
    <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS"/>
    <param name="controller_frequency" value="10.0"/>
    <param name="controller_patience" value="15.0"/>
    <param name="planner_frequency" value="1.0"/>
    <param name="planner_patience" value="10.0"/>
    <param name="oscillation_timeout" value="10.0"/>
    <param name="oscillation_distance" value="0.2"/>
    <param name="recovery_behavior_enabled" value="true"/>
    <param name="transform_timeout" value="1.0"/>
    <param name="tf_buffer_duration" value="30.0"/>

    <rosparam>
      TebLocalPlannerROS:
        # 2D holonomic motion - realistic drone limits
        max_vel_x: 0.8
        max_vel_y: 0.8
        max_vel_theta: 0.6
        acc_lim_x: 0.4
        acc_lim_y: 0.4
        acc_lim_theta: 0.4

        # Drone footprint - square drone 0.6x0.6m
        footprint_model:
          type: "polygon"
          vertices: [[-0.3, -0.3], [0.3, -0.3], [0.3, 0.3], [-0.3, 0.3]]

        # Goal tolerance
        xy_goal_tolerance: 0.3
        yaw_goal_tolerance: 0.2

        # Obstacle avoidance - adjusted for 0.6x0.6m drone
        min_obstacle_dist: 0.5
        inflation_dist: 0.8
        dynamic_obstacle_inflation_dist: 0.8
        include_dynamic_obstacles: true
        include_costmap_obstacles: true
        costmap_obstacles_behind_robot_dist: 1.5
        obstacle_poses_affected: 15

        # Trajectory planning 2D
        teb_autosize: true
        dt_ref: 0.3
        dt_hysteresis: 0.1
        max_samples: 500
        global_plan_overwrite_orientation: true
        allow_init_with_backwards_motion: false
        max_global_plan_lookahead_dist: 3.0
        global_plan_viapoint_sep: -1
        global_plan_prune_distance: 1
        exact_arc_length: false
        feasibility_check_no_poses: 5
        publish_feedback: false

        # Robot - consistent with above limits
        max_vel_x_backwards: 0.3
        max_vel_theta: 0.6
        acc_lim_x: 0.4
        acc_lim_y: 0.4
        acc_lim_theta: 0.4
        min_turning_radius: 0.0
        wheelbase: 0.0
        cmd_angle_instead_rotvel: false

        # Weights
        weight_max_vel_x: 2
        weight_max_vel_y: 2
        weight_max_vel_theta: 1
        weight_acc_lim_x: 1
        weight_acc_lim_y: 1
        weight_acc_lim_theta: 1
        weight_kinematics_nh: 1000
        weight_kinematics_forward_drive: 1
        weight_kinematics_turning_radius: 1
        weight_optimaltime: 1
        weight_shortest_path: 0
        weight_obstacle: 100
        weight_inflation: 0.2
        weight_dynamic_obstacle: 10
        weight_dynamic_obstacle_inflation: 0.2
        weight_viapoint: 1
        weight_adapt_factor: 2

        # Homotopy Class Planner
        enable_homotopy_class_planning: true
        enable_multithreading: true
        simple_exploration: false
        max_number_classes: 4
        selection_cost_hysteresis: 1.0
        selection_prefer_initial_plan: 0.9
        selection_obst_cost_scale: 100.0
        selection_alternative_time_cost: false
        roadmap_graph_no_samples: 15
        roadmap_graph_area_width: 5
        roadmap_graph_area_length_scale: 1.0
        h_signature_prescaler: 0.5
        h_signature_threshold: 0.1
        obstacle_keypoint_offset: 0.1
        obstacle_heading_threshold: 0.45
        switching_blocking_period: 0.0
        viapoints_all_candidates: true
        delete_detours_backwards: true
        max_ratio_detours_duration_best_duration: 3.0
        visualize_hc_graph: false
        visualize_with_time_as_z_axis_scale: false

        # Recovery
        shrink_horizon_backup: true
        shrink_horizon_min_duration: 10
        oscillation_recovery: true
        oscillation_v_eps: 0.1
        oscillation_omega_eps: 0.1
        oscillation_recovery_min_duration: 10
        oscillation_filter_duration: 10

      # Global Costmap for GlobalPlanner - uses /map
      global_costmap:
        global_frame: map
        robot_base_frame: base_link
        update_frequency: 1.0
        publish_frequency: 0.5
        rolling_window: false
        width: 50.0
        height: 50.0
        resolution: 0.1
        transform_tolerance: 2.0
        plugins:
            - {name: static_layer, type: "costmap_2d::StaticLayer"}
            - {name: inflation_layer, type: "costmap_2d::InflationLayer"}
        static_layer:
          enabled: true
          map_topic: /map
          subscribe_to_updates: true
        inflation_layer:
          enabled: true
          inflation_radius: 0.5
          cost_scaling_factor: 3.0
      GlobalPlanner:
        allow_unknown: true
        use_dijkstra: true
        use_quadratic: true
        use_grid_path: false
        old_navfn_behavior: true
        cost_factor: 1.0
        neutral_cost: 1
        lethal_cost: 253
        unknown_cost_value: 255
        publish_potential: false
        default_tolerance: 0.5
      local_costmap:
        global_frame: odom
        robot_base_frame: base_link
        update_frequency: 10.0        # Increased for better real-time response
        publish_frequency: 5.0        # Publish rate for visualization
        rolling_window: true          # Rolling window follows robot
        width: 6.0                    # Larger window for better lookahead
        height: 6.0
        resolution: 0.05              # High resolution 5cm
        transform_tolerance: 0.5      # Tighter tolerance for accuracy
        plugins:
            - {name: obstacle_laser, type: "costmap_2d::ObstacleLayer"}
            - {name: inflation_layer, type: "costmap_2d::InflationLayer"}
        inflation_layer:
          enabled: true
          inflation_radius: 0.5
          cost_scaling_factor: 3.0
        obstacle_laser:
          enabled: true
          observation_sources: scan
          track_unkown_space: true
          scan:
            sensor_frame: lidar_link
            data_type: LaserScan
            topic: scan                    # Real-time lidar for obstacle detection
            marking: true                   # Mark new obstacles
            clearing: true                  # Clear free space
            max_obstacle_height: 3.0        # Height limit for obstacles
            min_obstacle_height: 0.0
            obstacle_range: 5.0             # Detection range for obstacles
            raytrace_range: 8.0             # Range for clearing free space
            inf_is_valid: true             # Ignore infinite readings
            expected_update_rate: 10.0      # Expected lidar update rate
            observation_persistence: 0.0    # How long to keep observations
            transform_tolerance: 0.5        # Transform timeout
    </rosparam>
  </node>
  <node pkg="cart_teb_test" type="publish_init_pose.py" name="init_pose_pub" output="screen"/>
</launch>

